package hoge.db;

import hoge.exception.ApplicationException;
import hoge.log.Log;
import hoge.utils.StringUtils;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.Date;

import junit.framework.TestCase;

public class AnsiDialectTest extends TestCase {
    
    public AnsiDialectTest(String name) {
        super(name);
    }
    
    public void testBackupLogReplacer() {
        String result = new AnsiDialect().createLogStatement("SELECT ? FROM dual WHERE blah = ? ", 
                new String[] {"blah?blah", "blah2'"}, 2);
        assertEquals("Replacer error", "SELECT 'blah?blah' FROM dual WHERE blah = 'blah2\\'' ", result);
    }
    
    public void testBackupLogReplacer2() {
        String result = new AnsiDialect().createLogStatement("SELECT ? FROM dual WHERE blah = ? ", 
                new Object[] {new Integer(2), new Long(5)}, 2);
        assertEquals("Replacer error", "SELECT 2 FROM dual WHERE blah = 5 ", result);
    }
    
    public void testBackupLogReplacer3() {
        Date now = new Date();
        String result = new AnsiDialect().createLogStatement("SELECT ? FROM dual WHERE blah = ? ", 
                new Object[] {new Float(3), now}, 2);
        assertEquals("Replacer error", "SELECT 3.0 FROM dual WHERE blah = '" + 
                AnsiDialect.sdf.format(now) + "' ", result);
    }

	public void test_type() throws Exception {
		// TODO auto-generated by JUnit Helper.
		assertNotNull(AnsiDialect.class);
	}

	public void test_instantiation() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		assertNotNull(target);
	}

	public void test_makeWhenSQL_A$String$String$String$String$String() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		String checkExpression = null;
		String checkOperator = null;
		String checkValue = null;
		String trueExpression = null;
		String falseExpression = null;
		String actual = target.makeWhenSQL(checkExpression, checkOperator, checkValue, trueExpression, falseExpression);
		String expected = null;
		assertEquals(expected, actual);
	}

	public void test_makeWhenSQL_A$String$String$String() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		String checkExpression = null;
		String trueExpression = null;
		String falseExpression = null;
		String actual = target.makeWhenSQL(checkExpression, trueExpression, falseExpression);
		String expected = null;
		assertEquals(expected, actual);
	}

	public void test_getSequenceConnection_A$DBConnectionWrapper() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		DBConnectionWrapper dbConn = null;
		Connection actual = target.getSequenceConnection(dbConn);
		Connection expected = null;
		assertEquals(expected, actual);
	}

	public void test_getSequenceConnection_A$DBConnectionWrapper_T$SQLException() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		DBConnectionWrapper dbConn = null;
		try {
			target.getSequenceConnection(dbConn);
			fail("Expected exception was not thrown!");
		} catch (SQLException e) {
		}
	}

	public void test_releaseSequenceConnection_A$DBConnectionWrapper$Connection() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		DBConnectionWrapper dbConn = null;
		Connection conn = null;
		target.releaseSequenceConnection(dbConn, conn);
	}

	public void test_releaseSequenceConnection_A$DBConnectionWrapper$Connection_T$SQLException() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		DBConnectionWrapper dbConn = null;
		Connection conn = null;
		try {
			target.releaseSequenceConnection(dbConn, conn);
			fail("Expected exception was not thrown!");
		} catch (SQLException e) {
		}
	}

	public void test_getSequenceValue_A$DBConnectionWrapper$String() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		DBConnectionWrapper dbConn = null;
		String sequenceName = null;
		Long actual = target.getSequenceValue(dbConn, sequenceName);
		Long expected = null;
		assertEquals(expected, actual);
	}

	public void test_getSequenceValue_A$DBConnectionWrapper$String_T$SQLException() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		DBConnectionWrapper dbConn = null;
		String sequenceName = null;
		try {
			target.getSequenceValue(dbConn, sequenceName);
			fail("Expected exception was not thrown!");
		} catch (SQLException e) {
		}
	}

	public void test_getEmulatedSequenceValue_A$DBConnectionWrapper$String() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		DBConnectionWrapper dbConn = null;
		String sequenceName = null;
		Long actual = target.getEmulatedSequenceValue(dbConn, sequenceName);
		Long expected = null;
		assertEquals(expected, actual);
	}

	public void test_getEmulatedSequenceValue_A$DBConnectionWrapper$String_T$SQLException() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		DBConnectionWrapper dbConn = null;
		String sequenceName = null;
		try {
			target.getEmulatedSequenceValue(dbConn, sequenceName);
			fail("Expected exception was not thrown!");
		} catch (SQLException e) {
		}
	}

	public void test_makeJoinFromClause_A$String$JoinDescriptor$JoinSearchPeer() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		String prefix = null;
		JoinDescriptor join = null;
		JoinSearchPeer caller = null;
		String actual = target.makeJoinFromClause(prefix, join, caller);
		String expected = null;
		assertEquals(expected, actual);
	}

	public void test_makeJoinFromClause_A$String$String$String$JoinConditionArray$String$JoinSearchPeer() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		String oneClause = null;
		String twoClause = null;
		String joinType = null;
		JoinCondition[] conditions = new JoinCondition[] {};
		String prefix = null;
		JoinSearchPeer caller = null;
		String actual = target.makeJoinFromClause(oneClause, twoClause, joinType, conditions, prefix, caller);
		String expected = null;
		assertEquals(expected, actual);
	}

	public void test_makeJoinWhereClause_A$String$JoinDescriptor$JoinSearchPeer() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		String prefix = null;
		JoinDescriptor join = null;
		JoinSearchPeer caller = null;
		String actual = target.makeJoinWhereClause(prefix, join, caller);
		String expected = null;
		assertEquals(expected, actual);
	}

	public void test_makeFromPhrase_A$String$String() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		String tableName = null;
		String alias = null;
		String actual = target.makeFromPhrase(tableName, alias);
		String expected = null;
		assertEquals(expected, actual);
	}

	public void test_makeRowLimitedSQL_A$String$long() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		String inputSQL = null;
		long maxRows = 0L;
		String actual = target.makeRowLimitedSQL(inputSQL, maxRows);
		String expected = null;
		assertEquals(expected, actual);
	}

	public void test_getMaxQueryParameterCount_A$() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		int actual = target.getMaxQueryParameterCount();
		int expected = 0;
		assertEquals(expected, actual);
	}

	public void test_getMaxQuerySQLLength_A$() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		int actual = target.getMaxQuerySQLLength();
		int expected = 0;
		assertEquals(expected, actual);
	}

	public void test_createLogStatement_A$String$ObjectArray$int() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		String parameterSQL = null;
		Object[] parameters = new Object[] {};
		int paramCount = 0;
		String actual = target.createLogStatement(parameterSQL, parameters, paramCount);
		String expected = null;
		assertEquals(expected, actual);
	}

	public void test_encodeParameterForLogging_A$Object() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		Object parameter = null;
		String actual = target.encodeParameterForLogging(parameter);
		String expected = null;
		assertEquals(expected, actual);
	}

	public void test_escapeStringParameterForLogging_A$String() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		String input = null;
		String actual = target.escapeStringParameterForLogging(input);
		String expected = null;
		assertEquals(expected, actual);
	}

	public void test_supportsAutonumberColumns_A$() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		boolean actual = target.supportsAutonumberColumns();
		boolean expected = false;
		assertEquals(expected, actual);
	}

	public void test_makeUppercaseFunction_A$String() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		String fieldName = null;
		String actual = target.makeUppercaseFunction(fieldName);
		String expected = null;
		assertEquals(expected, actual);
	}

	public void test_makeDateFormatFunction_A$String$String() throws Exception {
		// TODO auto-generated by JUnit Helper.
		AnsiDialect target = new AnsiDialect();
		String fieldName = null;
		String dateFormat = null;
		String actual = target.makeDateFormatFunction(fieldName, dateFormat);
		String expected = null;
		assertEquals(expected, actual);
	}

}
